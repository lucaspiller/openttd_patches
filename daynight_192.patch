Index: gfx.c
===================================================================
--- gfx.c	(revision 2377)
+++ gfx.c	(working copy)
@@ -6,6 +6,8 @@
 #include "table/palettes.h"
 #include "hal.h"
 
+#include "variables.h"
+
 static void GfxMainBlitter(const Sprite *sprite, int x, int y, int mode);
 
 static int _stringwidth_out;
@@ -1515,7 +1517,23 @@
 #define EXTR(p,q) (((uint16)(_timer_counter * (p)) * (q)) >> 16)
 #define EXTR2(p,q) (((uint16)(~_timer_counter * (p)) * (q)) >> 16)
 #define COPY_TRIPLET do {d[0]=s[0+j]; d[1]=s[1+j]; d[2]=s[2+j];d+=3;}while(0)
+#define COPY_TRIPLET_DARK do {d[0]=(byte)((s[0+j]*3)/(new_dark_state+3)); d[1]=(byte)((s[1+j]*3)/(new_dark_state+3)); d[2]=(byte)((s[2+j]*3)/(new_dark_state+3));d+=3;}while(0)
 
+
+// prissi: day to dark state
+static const byte dark_state[31]={ 
+	3, 3, 3, 3, 3,
+	2, 1,
+	0, 0, 0, 0,  0, 0, 0, 0,  
+	0, 0, 0, 0,  0, 0, 0, 0,
+	1, 2, 
+	3, 3, 3, 3, 3, 3 };
+
+
+/*
+ * Creates and animates the palette
+ * the colors before 217 are static and only darkend during the night
+ */
 void DoPaletteAnimations(void)
 {
 	const byte *s;
@@ -1523,14 +1541,44 @@
 	/* Amount of colors to be rotated.
 	 * A few more for the DOS palette, because the water colors are
 	 * 245-254 for DOS and 217-226 for Windows.  */
-	int c = _use_dos_palette?38:28;
+	const int c = _use_dos_palette?38:28;
 	int j;
 	int i;
 	const ExtraPaletteValues *ev = &_extra_palette_values;
-	byte old_val[114]; // max(c*(38:28)) = 114
 
+	// prissi: darkening
+	static uint8 last_dark_state=-1;  // saves the current darkening state
+	uint8 new_dark_state = 0; // no darkening
+	// prevent darkenig at intro screen
+	if(_game_mode != GM_MENU /* &&  add switch here */) {
+		YearMonthDay YMD;
+		ConvertDayToYMD(&YMD, _date);
+		new_dark_state = dark_state[YMD.day-1];
+	}
+	// ok, we need to change the palette
+	if(  new_dark_state!=last_dark_state ) {
+		d = _cur_palette;
+		s =  _palettes[_use_dos_palette?1:0];
+		for( i=0*3;  i<217*3;  i++ ) {
+			d[i] = (byte)((s[i]*3)/(new_dark_state+3));
+		}
+		// we changed from the first on
+		last_dark_state = new_dark_state;
+		_pal_first_dirty = 0;
+		_pal_last_dirty = 255;
+	}
+	else {
+		_pal_first_dirty = 217;
+		_pal_last_dirty = 217+c;
+	}
+
+	// special for color 245 (depends on DOS/win)
+	for( i=0;  i<3;  i++ ) {
+		_cur_palette[i+(217+c)*3] = (byte)(444/(last_dark_state+3));
+	}
+
+	// destination current palette
 	d = _cur_palette + 217*3;
-	memcpy(old_val, d, c*3);
 
 	// Dark blue water
 	s = ev->a;
@@ -1547,7 +1595,7 @@
 	if (_opt.landscape == LT_CANDY) s = ev->bc;
 	j = EXTR(128, 15) * 3;
 	for(i=0; i!=5; i++) {
-		COPY_TRIPLET;
+		COPY_TRIPLET_DARK;
 		j += 9;
 		if (j >= 45) j -= 45;
 	}
@@ -1555,7 +1603,7 @@
 	s = ev->e;
 	j = EXTR2(512, 5) * 3;
 	for(i=0; i!=5; i++) {
-		COPY_TRIPLET;
+		COPY_TRIPLET_DARK;
 		j += 3;
 		if (j == 3*5) j = 0;
 	}
@@ -1606,7 +1654,7 @@
 		if (_opt.landscape == LT_CANDY) s = ev->ac;
 		j = EXTR(320,5) * 3;
 		for(i=0; i!=5; i++) {
-			COPY_TRIPLET;
+			COPY_TRIPLET_DARK;
 			j+=3;
 			if (j == 15) j = 0;
 		}
@@ -1616,16 +1664,11 @@
 		if (_opt.landscape == LT_CANDY) s = ev->bc;
 		j = EXTR(128, 15) * 3;
 		for(i=0; i!=5; i++) {
-			COPY_TRIPLET;
+			COPY_TRIPLET_DARK;
 			j += 9;
 			if (j >= 45) j -= 45;
 		}
 	}
-
-	if (memcmp(old_val, _cur_palette + 217*3, c*3)) {
-		if (_pal_first_dirty > 217) _pal_first_dirty = 217;
-		if (_pal_last_dirty < 217+c) _pal_last_dirty = 217+c;
-	}
 }
 
 
