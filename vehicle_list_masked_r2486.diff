Index: vehicle_gui.c
===================================================================
--- vehicle_gui.c	(revision 2486)
+++ vehicle_gui.c	(working copy)
@@ -10,7 +10,12 @@
 #include "gui.h"
 #include "command.h"
 #include "gfx.h"
+#include "station.h"
+#include "waypoint.h"
+#include "depot.h"
 
+extern int _traininfo_vehicle_pitch;
+
 VehicleSortListingTypeFunctions * const _vehicle_sorter[] = {
 	&VehicleUnsortedSorter,
 	&VehicleNumberSorter,
@@ -51,6 +56,7 @@
 		switch (w->window_class) {
 		case WC_TRAINS_LIST: case WC_ROADVEH_LIST:
 		case WC_SHIPS_LIST:  case WC_AIRCRAFT_LIST:
+		case WC_VEHICLES_LIST:
 			WP(w, vehiclelist_d).flags |= VL_REBUILD;
 			SetWindowDirty(w);
 			break;
@@ -66,6 +72,7 @@
 		switch (w->window_class) {
 		case WC_TRAINS_LIST: case WC_ROADVEH_LIST:
 		case WC_SHIPS_LIST:  case WC_AIRCRAFT_LIST:
+		case WC_VEHICLES_LIST:
 			WP(w, vehiclelist_d).flags |= VL_RESORT;
 			SetWindowDirty(w);
 			break;
@@ -73,61 +80,6 @@
 		}
 }
 
-void BuildVehicleList(vehiclelist_d *vl, int type, int owner, int station)
-{
-	int subtype = (type != VEH_Aircraft) ? TS_Front_Engine : 2;
-	int n = 0;
-	int i;
-
-	if (!(vl->flags & VL_REBUILD)) return;
-
-	/* Create array for sorting */
-	_vehicle_sort = realloc(_vehicle_sort, GetVehiclePoolSize() * sizeof(_vehicle_sort[0]));
-	if (_vehicle_sort == NULL)
-		error("Could not allocate memory for the vehicle-sorting-list");
-
-	DEBUG(misc, 1) ("Building vehicle list for player %d station %d...",
-		owner, station);
-
-	if (station != -1) {
-		const Vehicle *v;
-		FOR_ALL_VEHICLES(v) {
-			if (v->type == type && v->subtype <= subtype) {
-				const Order *order;
-
-				FOR_VEHICLE_ORDERS(v, order) {
-					if (order->type == OT_GOTO_STATION && order->station == station) {
-						_vehicle_sort[n].index = v->index;
-						_vehicle_sort[n].owner = v->owner;
-						++n;
-						break;
-					}
-				}
-			}
-		}
-	} else {
-		const Vehicle *v;
-		FOR_ALL_VEHICLES(v) {
-			if (v->type == type && v->subtype <= subtype && v->owner == owner) {
-				_vehicle_sort[n].index = v->index;
-				_vehicle_sort[n].owner = v->owner;
-				++n;
-			}
-		}
-	}
-
-	vl->sort_list = realloc(vl->sort_list, n * sizeof(vl->sort_list[0]));
-	if (n!=0 && vl->sort_list == NULL)
-		error("Could not allocate memory for the vehicle-sorting-list");
-	vl->list_length = n;
-
-	for (i = 0; i < n; ++i)
-		vl->sort_list[i] = _vehicle_sort[i];
-
-	vl->flags &= ~VL_REBUILD;
-	vl->flags |= VL_RESORT;
-}
-
 void SortVehicleList(vehiclelist_d *vl)
 {
 	if (!(vl->flags & VL_RESORT)) return;
@@ -1061,3 +1013,386 @@
 {
 	memset(&_sorting, 0, sizeof(_sorting));
 }
+
+void BuildVehicleListMasked(vehiclelist_d *vl, DisplayListOptions *listopt, int owner)
+{
+	const int subtype = (HASBIT(listopt->type_mask, VEH_Aircraft)) ? SUBTYPE_AIRCRAFT : TS_Front_Engine;
+	const byte landscape = _opt.landscape;
+	int i, n = 0;
+	uint32 cmask;
+
+	if (!(vl->flags & VL_REBUILD)) return;
+
+	/* Create array for sorting */
+	_vehicle_sort = realloc(_vehicle_sort, GetVehiclePoolSize() * sizeof(_vehicle_sort[0]));
+	if (_vehicle_sort == NULL)
+		error("Could not allocate memory for the vehicle-sorting-list");
+
+	DEBUG(misc, 1) ("Building vehicle list for player %d station at %d...",
+		owner, listopt->xy);
+	
+	if (listopt->xy != INVALID_TILE) {  // Build List for a station/waypoint (other?)
+		const Vehicle *v;
+
+		assert(listopt->xy < MapSize()); // not really needed, you will get an empty list when xy is outside the mapbounds
+
+		FOR_ALL_VEHICLES(v) {
+			if (HASBIT(listopt->type_mask, v->type) && v->subtype <= subtype)
+			{
+				if (listopt->cargo_mask == CARGO_MASK_ALL) {
+					cmask = CARGO_MASK_ALL;
+				} else {
+					const Vehicle *u = v;
+					cmask = 0;
+					for (u = v; u != NULL; u = u->next) { // check cargotypes of all vehicles of the consist (trains/aircraft)
+					// vehicles that cant carry any cargo may have cargotype 0 == CT_PASSENGERS,
+					// so we have to make sure we only get those that could really carry cargo
+					// think we should make them have INVALID_CARGO cargotype instead... (Asterix)
+						if (u->cargo_cap != 0)
+							cmask |= HASBIT(_landscape_global_cargo_mask[landscape], u->cargo_type);
+					}
+				}
+				if (listopt->cargo_mask & cmask) {
+					const Order *order;
+
+					FOR_VEHICLE_ORDERS(v, order) { // check if consist is scheduled for this map-position
+						if (order->type == OT_GOTO_STATION && GetStation(order->station)->xy == listopt->xy) {
+								_vehicle_sort[n].index = v->index;
+								_vehicle_sort[n].owner = v->owner;
+								++n;
+								break;
+						} else if (order->type == OT_GOTO_WAYPOINT && GetWaypoint(order->station)->xy == listopt->xy) {
+								_vehicle_sort[n].index = v->index;
+								_vehicle_sort[n].owner = v->owner;
+								++n;
+								break;
+						} else if (order->type == OT_GOTO_DEPOT && GetDepot(order->station)->xy == listopt->xy) {
+								_vehicle_sort[n].index = v->index;
+								_vehicle_sort[n].owner = v->owner;
+								++n;
+								break;
+						}
+					} // Vehicle Orders
+				}
+			}
+		} // All Vehicles
+	} else {
+		Vehicle *v;
+		FOR_ALL_VEHICLES(v) {
+			if (HASBIT(listopt->type_mask, v->type) && v->subtype <= subtype && v->owner == owner)
+			{
+				if (listopt->cargo_mask == CARGO_MASK_ALL) {
+					_vehicle_sort[n].index = v->index;
+					_vehicle_sort[n].owner = v->owner;
+					++n;
+				} else {
+					Vehicle *u = v;
+					cmask = 0;
+					for (u = v; u != NULL; u = u->next) { // check cargotypes of all vehicles of the consist (trains/aircraft)
+						if (u->cargo_cap != 0)
+							cmask |= HASBIT(_landscape_global_cargo_mask[landscape], u->cargo_type);
+					}
+					if (listopt->cargo_mask & cmask) {
+						_vehicle_sort[n].index = v->index;
+						_vehicle_sort[n].owner = v->owner;
+						++n;
+					}
+				}
+			}
+		} // All Vehicles
+	}
+
+	vl->sort_list = realloc(vl->sort_list, n * sizeof(vl->sort_list[0]));
+	if (n != 0 && vl->sort_list == NULL)
+		error("Could not allocate memory for the vehicle-sorting-list");
+	vl->list_length = n;
+
+	for (i = 0; i < n; ++i)
+		vl->sort_list[i] = _vehicle_sort[i];
+
+	vl->flags &= ~VL_REBUILD;
+	vl->flags |= VL_RESORT;
+}
+
+static void PlayerVehiclesWndProc(Window *w, WindowEvent *e)
+{
+	int station = (int)w->window_number >> 16;
+	int owner = w->window_number & 0xff;
+	vehiclelist_d *vl = &WP(w, vehiclelist_d);
+
+	switch(e->event) {
+	case WE_PAINT: {
+		int x = 2;
+		int y = PLY_WND_PRC__OFFSET_TOP_WIDGET;
+		int max;
+		int i;
+
+		BuildVehicleListMasked(vl, &w->listopt, owner);
+		SortVehicleList(vl);
+
+		SetVScrollCount(w, vl->list_length);
+		// disable 'Sort By' tooltip on Unsorted sorting criteria
+		if (vl->sort_type == SORT_BY_UNSORTED)
+			w->disabled_state |= (1 << 3);
+
+		/* draw the widgets */
+		{
+			const Player *p = GetPlayer((owner != OWNER_NONE) ? owner : _current_player);
+			if (station == -1) {
+				/* Company Name -- (###) Trains */
+				SetDParam(0, p->name_1);
+				SetDParam(1, p->name_2);
+				SetDParam(2, w->vscroll.count);
+				w->widget[1].unkA = STR_VEHICLES_LISTING;
+			} else {
+				/* Station Name -- (###) Trains */
+				SetDParam(0, station);
+				SetDParam(1, w->vscroll.count);
+				w->widget[1].unkA = STR_SCHEDULED_VEHICLES_LISTING;
+			}
+			DrawWindowWidgets(w);
+		}
+		/* draw sorting criteria string */
+		DrawString(85, 15, _vehicle_sort_listing[vl->sort_type], 0x10);
+		/* draw arrow pointing up/down for ascending/descending sorting */
+		DoDrawString(vl->flags & VL_DESC ? "\xAA" : "\xA0", 69, 15, 0x10);
+
+		max = min(w->vscroll.pos + w->vscroll.cap, vl->list_length);
+		for (i = w->vscroll.pos; i < max; ++i) {
+			Vehicle *v = GetVehicle(vl->sort_list[i].index);
+			StringID str;
+
+			assert(v->owner == owner || v->owner == _current_player);
+
+			switch (v->type) {
+			case VEH_Train:
+			{
+				DrawTrainImage(
+					v, x + 21, y + 6 + _traininfo_vehicle_pitch, w->hscroll.cap, 0, INVALID_VEHICLE);
+
+				SetDParam(0, v->unitnumber);
+				if (IsTileDepotType(v->tile, TRANSPORT_RAIL) && (v->vehstatus & VS_HIDDEN))
+					str = STR_021F;
+				else
+					str = v->age > v->max_age - 366 ? STR_00E3 : STR_00E2;
+				DrawString(x, y + 2, str, 0);
+				if (v->string_id != STR_SV_TRAIN_NAME) {
+					SetDParam(0, v->string_id);
+					DrawString(x + 21, y, STR_01AB, 0);
+				}
+				break;
+			}
+			case VEH_Road:
+			{
+				DrawRoadVehImage(v, x + 22, y + 6, INVALID_VEHICLE);
+				SetDParam(0, v->unitnumber);
+				if (IsTileDepotType(v->tile, TRANSPORT_ROAD) && (v->vehstatus & VS_HIDDEN))
+					str = STR_021F;
+				else
+					str = v->age > v->max_age - 366 ? STR_00E3 : STR_00E2;
+				DrawString(x, y + 2, str, 0);
+				if (v->string_id != STR_SV_ROADVEH_NAME) {
+					SetDParam(0, v->string_id);
+					DrawString(x + 24, y, STR_01AB, 0);
+				}
+				break;
+			}
+			case VEH_Aircraft:
+			{
+				DrawAircraftImage(v, x + 19, y + 6, INVALID_VEHICLE);
+				SetDParam(0, v->unitnumber);
+				if (IsAircraftHangarTile(v->tile) && (v->vehstatus & VS_HIDDEN))
+					str = STR_021F;
+				else
+					str = v->age > v->max_age - 366 ? STR_00E3 : STR_00E2;
+				DrawString(x, y + 2, str, 0);
+				if (v->string_id != STR_SV_AIRCRAFT_NAME) {
+					SetDParam(0, v->string_id);
+					DrawString(x + 19, y, STR_01AB, 0);
+				}
+				break;
+			}
+			case VEH_Ship:
+			{
+				DrawShipImage(v, x + 19, y + 6, INVALID_VEHICLE);
+				SetDParam(0, v->unitnumber);
+				if (IsTileDepotType(v->tile, TRANSPORT_WATER) && (v->vehstatus & VS_HIDDEN))
+					str = STR_021F;
+				else
+					str = v->age > v->max_age - 366 ? STR_00E3 : STR_00E2;
+				DrawString(x, y + 2, str, 0);
+				if (v->string_id != STR_SV_SHIP_NAME) {
+					SetDParam(0, v->string_id);
+					DrawString(x + 12, y, STR_01AB, 0);
+				}
+				break;
+			}
+			default:
+				continue;
+			}
+			DrawVehicleProfitButton(v, x, y + 13);
+			SetDParam(0, v->profit_this_year);
+			SetDParam(1, v->profit_last_year);
+			DrawString(x + 21, y + 26, STR_0198_PROFIT_THIS_YEAR_LAST_YEAR, 0);
+
+			y += PLY_WND_PRC__SIZE_OF_ROW_BIG;
+		}
+		break;
+	}
+
+	case WE_CLICK: {
+		switch(e->click.widget) {
+		case 3: /* Flip sorting method ascending/descending */
+			vl->flags ^= VL_DESC;
+			vl->flags |= VL_RESORT;
+			_sorting.masked.order = !!(vl->flags & VL_DESC);
+			SetWindowDirty(w);
+			break;
+
+		case 4: case 5:/* Select sorting criteria dropdown menu */
+			ShowDropDownMenu(w, _vehicle_sort_listing, vl->sort_type, 5, 0, 0);
+			return;
+
+		case 7: { /* Matrix to show vehicles */
+			uint32 id_v = (e->click.pt.y - PLY_WND_PRC__OFFSET_TOP_WIDGET) / PLY_WND_PRC__SIZE_OF_ROW_BIG;
+
+			if (id_v >= w->vscroll.cap) { return;} // click out of bounds
+
+			id_v += w->vscroll.pos;
+			{
+				Vehicle *v;
+				if (id_v >= vl->list_length) return; // click out of list bound
+				v = GetVehicle(vl->sort_list[id_v].index);
+
+				assert(v->owner == owner || v->owner == _current_player);
+				
+				switch (v->type)
+				{
+				case VEH_Train:
+					ShowTrainViewWindow(v);
+					break;
+				case VEH_Ship:
+					ShowShipViewWindow(v);
+					break;
+				case VEH_Road:
+					ShowRoadVehViewWindow(v);
+					break;
+				case VEH_Aircraft:
+					ShowAircraftViewWindow(v);
+					break;
+				}
+			}
+		} break;
+		}
+	}	break;
+
+	case WE_DROPDOWN_SELECT: /* we have selected a dropdown item in the list */
+		if (vl->sort_type != e->dropdown.index) {
+			// value has changed -> resort
+			vl->flags |= VL_RESORT;
+			vl->sort_type = e->dropdown.index;
+			_sorting.masked.criteria = vl->sort_type;
+
+			// enable 'Sort By' if a sorter criteria is chosen
+			if (vl->sort_type != SORT_BY_UNSORTED)
+				CLRBIT(w->disabled_state, 3);
+		}
+		SetWindowDirty(w);
+		break;
+
+	case WE_CREATE: /* set up resort timer */
+		vl->sort_list = NULL;
+		vl->flags = VL_REBUILD | (_sorting.train.order << (VL_DESC - 1));
+		vl->sort_type = _sorting.masked.criteria;
+		vl->resort_timer = DAY_TICKS * PERIODIC_RESORT_DAYS;
+		break;
+
+	case WE_DESTROY:
+		free(vl->sort_list);
+		break;
+
+	case WE_TICK: /* resort the list every 20 seconds orso (10 days) */
+		if (--vl->resort_timer == 0) {
+			DEBUG(misc, 1) ("Periodic resort trains list player %d station %d",
+				owner, station);
+			vl->resort_timer = DAY_TICKS * PERIODIC_RESORT_DAYS;
+			vl->flags |= VL_RESORT;
+			SetWindowDirty(w);
+		}
+		break;
+
+	case WE_RESIZE:
+		/* Update the scroll + matrix */
+		w->hscroll.cap += e->sizing.diff.x / 29;
+		w->vscroll.cap += e->sizing.diff.y / PLY_WND_PRC__SIZE_OF_ROW_BIG;
+		w->widget[7].unkA = (w->vscroll.cap << 8) + 1;
+		break;
+	}
+}
+
+static const Widget _player_vehicles_widgets[] = {
+{   WWT_CLOSEBOX,   RESIZE_NONE,    14,     0,    10,     0,    13, STR_00C5,							STR_018B_CLOSE_WINDOW},
+{    WWT_CAPTION,  RESIZE_RIGHT,    14,    11,   312,     0,    13, STR_VEHICLES_LISTING,				STR_018C_WINDOW_TITLE_DRAG_THIS},
+{  WWT_STICKYBOX,     RESIZE_LR,    14,   313,   324,     0,    13, 0x0,										STR_STICKY_BUTTON},
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,     0,    80,    14,    25, SRT_SORT_BY,						STR_SORT_ORDER_TIP},
+{      WWT_PANEL,   RESIZE_NONE,    14,    81,   232,    14,    25, 0x0,										STR_SORT_CRITERIA_TIP},
+{   WWT_CLOSEBOX,   RESIZE_NONE,    14,   233,   243,    14,    25, STR_0225,							STR_SORT_CRITERIA_TIP},
+{      WWT_PANEL,  RESIZE_RIGHT,    14,   244,   324,    14,    25, 0x0,										STR_NULL},
+{     WWT_MATRIX,     RESIZE_RB,    14,     0,   312,    26,   207, 0x701,									STR_883D_TRAINS_CLICK_ON_TRAIN_FOR},
+{  WWT_SCROLLBAR,    RESIZE_LRB,    14,   313,   324,    26,   207, 0x0,										STR_0190_SCROLL_BAR_SCROLLS_LIST},
+{      WWT_PANEL,    RESIZE_RTB,    14,     0,   312,   208,   219, 0x0,										STR_NULL},
+{  WWT_RESIZEBOX,   RESIZE_LRTB,    14,   313,   324,   208,   219, 0x0,										STR_RESIZE_BUTTON},
+{   WIDGETS_END},
+};
+
+static const WindowDesc _player_vehicles_desc = {
+	-1, -1, 325, 220,
+	WC_VEHICLES_LIST,0,
+	WDF_STD_TOOLTIPS | WDF_STD_BTN | WDF_DEF_WIDGET | WDF_UNCLICK_BUTTONS | WDF_STICKY_BUTTON | WDF_RESIZABLE,
+	_player_vehicles_widgets,
+	PlayerVehiclesWndProc
+};
+
+void ShowPlayerVehicles(int player, int station, uint32 type_mask, uint64 cargo_mask, TileIndex xy)
+{
+	Window *w;
+
+	w = AllocateWindowDescFront(&_player_vehicles_desc, (station << 16) | player);
+	if (w) {
+		w->listopt.cargo_mask = cargo_mask;
+		w->listopt.type_mask = type_mask;
+		w->listopt.xy = xy;
+
+		w->caption_color = (player != OWNER_NONE) ? player : _current_player;
+		w->hscroll.cap = 10;
+		w->vscroll.cap = 5; // maximum number of vehicles shown
+		w->widget[7].unkA = (w->vscroll.cap << 8) + 1;
+		w->resize.step_height = PLY_WND_PRC__SIZE_OF_ROW_BIG;
+		w->resize.step_width = 29;
+		w->resize.height = 220 - (PLY_WND_PRC__SIZE_OF_ROW_BIG * 3); /* Minimum of 4 vehicles */
+	} else {
+		w = FindWindowById(WC_VEHICLES_LIST, (station << 16) | player);
+		if (w) { // Window already open, rebuild vehicle-list with new otions?
+			bool changed = false;
+			if (w->listopt.cargo_mask != cargo_mask) {
+				w->listopt.cargo_mask = cargo_mask;
+				changed = true;
+			}
+			if (w->listopt.type_mask != type_mask) {
+				w->listopt.type_mask = type_mask;
+				changed = true;
+			}
+			if (w->listopt.xy != xy) {
+				w->listopt.xy = xy;
+				changed = true;
+			}
+
+			if (changed) {
+				vehiclelist_d *vl;
+				vl = &WP(w, vehiclelist_d);
+				vl->flags |= VL_REBUILD;
+				SetWindowDirty(w);
+			}
+		}
+	}
+}
Index: vehicle_gui.h
===================================================================
--- vehicle_gui.h	(revision 2486)
+++ vehicle_gui.h	(working copy)
@@ -13,9 +13,11 @@
 void RebuildVehicleLists(void);
 void ResortVehicleLists(void);
 
-void BuildVehicleList(struct vehiclelist_d *vl, int type, int owner, int station);
+void BuildVehicleListMasked(struct vehiclelist_d *vl, struct DisplayListOptions *listopt, int owner);
 void SortVehicleList(struct vehiclelist_d *vl);
 
+void ShowPlayerVehicles(int player, int station, uint32 type_mask, uint64 cargo_mask, TileIndex xy);
+
 int CDECL GeneralOwnerSorter(const void *a, const void *b);
 VARDEF uint32	_internal_name_sorter_id;	// internal StringID for default vehicle-names
 VARDEF uint32	_last_vehicle_idx;				// cached index to hopefully speed up name-sorting
@@ -58,6 +60,7 @@
 	Listing roadveh;
 	Listing ship;
 	Listing train;
+	Listing masked;
 } Sorting;
 
 VARDEF Sorting _sorting;
@@ -76,5 +79,9 @@
 void DrawAircraftPurchaseInfo(int x, int y, EngineID engine_number);
 void DrawShipPurchaseInfo(int x, int y, EngineID engine_number);
 
+void DrawTrainImage(const Vehicle *v, int x, int y, int count, int skip, VehicleID selection);
+void DrawShipImage(const Vehicle *v, int x, int y, VehicleID selection);
+void DrawAircraftImage(const Vehicle *v, int x, int y, VehicleID selection);
+void DrawRoadVehImage(const Vehicle *v, int x, int y, VehicleID selection);
 
 #endif /* VEHICLE_GUI_H */
Index: lang/english.txt
===================================================================
--- lang/english.txt	(revision 2486)
+++ lang/english.txt	(working copy)
@@ -2840,3 +2840,6 @@
 STR_PURCHASE_INFO_COST_SPEED                                    :{BLACK}Cost: {GOLD}{CURRENCY}{BLACK} Speed: {GOLD}{VELOCITY}
 STR_PURCHASE_INFO_AIRCRAFT_CAPACITY                             :{BLACK}Capacity: {GOLD}{COMMA16} passengers, {COMMA16} bags of mail
 STR_PURCHASE_INFO_PWAGPOWER_PWAGWEIGHT                          :{BLACK}Powered Wagons: {GOLD}+{COMMA16}hp{BLACK} Weight: {GOLD}+{COMMA8}t
+
+STR_VEHICLES_LISTING                                            :{WHITE}{STRING} - {COMMA16} selected Vehicles
+STR_SCHEDULED_VEHICLES_LISTING                                  :{WHITE}{STATION} - {COMMA16} selected scheduled Vehicles
Index: openttd.h
===================================================================
--- openttd.h	(revision 2486)
+++ openttd.h	(working copy)
@@ -266,7 +266,7 @@
 
 	NUM_CARGO = 12,
 
-	CT_INVALID = 0xFF
+	CT_INVALID = 0xFF,
 };
 
 typedef uint AcceptedCargo[NUM_CARGO];
@@ -442,9 +442,9 @@
 	WC_HIGHSCORE = 0x4D,
 	WC_ENDSCREEN = 0x4E,
 	WC_SIGN_LIST = 0x4F,
+	WC_VEHICLES_LIST = 0x50,
 };
 
-
 enum {
 	EXPENSES_CONSTRUCTION = 0,
 	EXPENSES_NEW_VEHICLES = 1,
Index: aircraft_gui.c
===================================================================
--- aircraft_gui.c	(revision 2486)
+++ aircraft_gui.c	(working copy)
@@ -57,7 +57,7 @@
 	y += 10;
 }
 
-static void DrawAircraftImage(const Vehicle *v, int x, int y, VehicleID selection)
+void DrawAircraftImage(const Vehicle *v, int x, int y, VehicleID selection)
 {
 	int image = GetAircraftImage(v, 6);
 	uint32 ormod = SPRITE_PALETTE(PLAYER_SPRITE_COLOR(v->owner));
@@ -932,7 +932,7 @@
 		int max;
 		int i;
 
-		BuildVehicleList(vl, VEH_Aircraft, owner, station);
+		BuildVehicleListMasked(vl, &w->listopt, owner);
 		SortVehicleList(vl);
 
 		SetVScrollCount(w, vl->list_length);
@@ -1128,6 +1128,13 @@
 	}
 
 	if (w) {
+		w->listopt.cargo_mask = CARGO_MASK_ALL;
+		w->listopt.type_mask = 1 << VEH_Aircraft;
+		if (station != INVALID_STATION)
+			w->listopt.xy = GetStation(station)->xy;
+		else
+			w->listopt.xy = INVALID_TILE;
+
 		w->caption_color = w->window_number;
 		w->vscroll.cap = 4;
 		w->widget[7].unkA = (w->vscroll.cap << 8) + 1;
Index: vehicle.h
===================================================================
--- vehicle.h	(revision 2486)
+++ vehicle.h	(working copy)
@@ -14,6 +14,10 @@
 	VEH_Disaster = 0x15,
 } ;
 
+enum {
+	SUBTYPE_AIRCRAFT = 2,
+};
+
 enum VehStatus {
 	VS_HIDDEN = 1,
 	VS_STOPPED = 2,
@@ -141,7 +145,7 @@
 
 struct Vehicle {
 	byte type;	// type, ie roadven,train,ship,aircraft,special
-	byte subtype;     // subtype (Filled with values from EffectVehicles or TrainSubTypes)(Filled with values from EffectVehicles or TrainSubTypes)
+	byte subtype;     // subtype (Filled with values from EffectVehicles or TrainSubTypes)
 
 	VehicleID index;	// NOSAVE: Index in vehicle array
 
Index: main_gui.c
===================================================================
--- main_gui.c	(revision 2486)
+++ main_gui.c	(working copy)
@@ -20,6 +20,7 @@
 #include "network.h"
 #include "signs.h"
 #include "waypoint.h"
+#include "station.h"
 
 #include "network_data.h"
 #include "network_client.h"
@@ -309,22 +310,22 @@
 
 static void MenuClickShowTrains(int index)
 {
-	ShowPlayerTrains(index, -1);
+	ShowPlayerTrains(index, INVALID_STATION);
 }
 
 static void MenuClickShowRoad(int index)
 {
-	ShowPlayerRoadVehicles(index, -1);
+	ShowPlayerRoadVehicles(index, INVALID_STATION);
 }
 
 static void MenuClickShowShips(int index)
 {
-	ShowPlayerShips(index, -1);
+	ShowPlayerShips(index, INVALID_STATION);
 }
 
 static void MenuClickShowAir(int index)
 {
-	ShowPlayerAircraft(index, -1);
+	ShowPlayerAircraft(index, INVALID_STATION);
 }
 
 static void MenuClickBuildRail(int index)
@@ -1897,10 +1898,10 @@
 		case WKC_F10:ShowOperatingProfitGraph(); break;
 		case WKC_F11: ShowCompanyLeagueTable(); break;
 		case WKC_F12: ShowBuildIndustryWindow(); break;
-		case WKC_SHIFT | WKC_F1: ShowPlayerTrains(local, -1); break;
-		case WKC_SHIFT | WKC_F2: ShowPlayerRoadVehicles(local, -1); break;
-		case WKC_SHIFT | WKC_F3: ShowPlayerShips(local, -1); break;
-		case WKC_SHIFT | WKC_F4: ShowPlayerAircraft(local, -1); break;
+		case WKC_SHIFT | WKC_F1: ShowPlayerTrains(local, INVALID_STATION); break;
+		case WKC_SHIFT | WKC_F2: ShowPlayerRoadVehicles(local, INVALID_STATION); break;
+		case WKC_SHIFT | WKC_F3: ShowPlayerShips(local, INVALID_STATION); break;
+		case WKC_SHIFT | WKC_F4: ShowPlayerAircraft(local, INVALID_STATION); break;
 		case WKC_SHIFT | WKC_F5: ToolbarZoomInClick(w); break;
 		case WKC_SHIFT | WKC_F6: ToolbarZoomOutClick(w); break;
 		case WKC_SHIFT | WKC_F7: ShowBuildRailToolbar(_last_built_railtype,-1); break;
Index: roadveh_gui.c
===================================================================
--- roadveh_gui.c	(revision 2486)
+++ roadveh_gui.c	(working copy)
@@ -57,7 +57,7 @@
 	y += 10;
 }
 
-static void DrawRoadVehImage(const Vehicle *v, int x, int y, VehicleID selection)
+void DrawRoadVehImage(const Vehicle *v, int x, int y, VehicleID selection)
 {
 	int image = GetRoadVehImage(v, 6);
 	uint32 ormod = SPRITE_PALETTE(PLAYER_SPRITE_COLOR(v->owner));
@@ -815,7 +815,7 @@
 		int max;
 		int i;
 
-		BuildVehicleList(vl, VEH_Road, owner, station);
+		BuildVehicleListMasked(vl, &w->listopt, owner);
 		SortVehicleList(vl);
 
 		SetVScrollCount(w, vl->list_length);
@@ -1007,6 +1007,13 @@
 		w = AllocateWindowDescFront(&_other_player_roadveh_desc, (station << 16) | player);
 	}
 	if (w) {
+		w->listopt.cargo_mask = CARGO_MASK_ALL;
+		w->listopt.type_mask = 1 << VEH_Road;
+		if (station != INVALID_STATION)
+			w->listopt.xy = GetStation(station)->xy;
+		else
+			w->listopt.xy = INVALID_TILE;
+
 		w->caption_color = player;
 		w->vscroll.cap = 7; // maximum number of vehicles shown
 		w->widget[7].unkA = (w->vscroll.cap << 8) + 1;
Index: train_gui.c
===================================================================
--- train_gui.c	(revision 2486)
+++ train_gui.c	(working copy)
@@ -327,7 +327,7 @@
 	}
 }
 
-static void DrawTrainImage(const Vehicle *v, int x, int y, int count, int skip, VehicleID selection)
+void DrawTrainImage(const Vehicle *v, int x, int y, int count, int skip, VehicleID selection)
 {
 	int max_x = x + count * 29;
 
@@ -1294,7 +1294,7 @@
 		int max;
 		int i;
 
-		BuildVehicleList(vl, VEH_Train, owner, station);
+		BuildVehicleListMasked(vl, &w->listopt, owner);
 		SortVehicleList(vl);
 
 		SetVScrollCount(w, vl->list_length);
@@ -1490,6 +1490,13 @@
 		w = AllocateWindowDescFront(&_other_player_trains_desc, (station << 16) | player);
 	}
 	if (w) {
+		w->listopt.cargo_mask = CARGO_MASK_ALL;
+		w->listopt.type_mask = 1 << VEH_Train;
+		if (station != INVALID_STATION)
+			w->listopt.xy = GetStation(station)->xy;
+		else
+			w->listopt.xy = INVALID_TILE;
+
 		w->caption_color = player;
 		w->hscroll.cap = 10;
 		w->vscroll.cap = 7; // maximum number of vehicles shown
Index: ship_gui.c
===================================================================
--- ship_gui.c	(revision 2486)
+++ ship_gui.c	(working copy)
@@ -57,7 +57,7 @@
 	y += 10;
 }
 
-static void DrawShipImage(const Vehicle *v, int x, int y, VehicleID selection)
+void DrawShipImage(const Vehicle *v, int x, int y, VehicleID selection)
 {
 	int image = GetShipImage(v, 6);
 	uint32 ormod = SPRITE_PALETTE(PLAYER_SPRITE_COLOR(v->owner));
@@ -915,7 +915,7 @@
 		int max;
 		int i;
 
-		BuildVehicleList(vl, VEH_Ship, owner, station);
+		BuildVehicleListMasked(vl, &w->listopt, owner);
 		SortVehicleList(vl);
 
 		SetVScrollCount(w, vl->list_length);
@@ -1110,6 +1110,13 @@
 		w = AllocateWindowDescFront(&_other_player_ships_desc, (station << 16) | player);
 	}
 	if (w) {
+		w->listopt.cargo_mask = CARGO_MASK_ALL;
+		w->listopt.type_mask = 1 << VEH_Ship;
+		if (station != INVALID_STATION)
+			w->listopt.xy = GetStation(station)->xy;
+		else
+			w->listopt.xy = INVALID_TILE;
+
 		w->caption_color = w->window_number;
 		w->vscroll.cap = 4;
 		w->widget[7].unkA = (w->vscroll.cap << 8) + 1;
Index: window.h
===================================================================
--- window.h	(revision 2486)
+++ window.h	(working copy)
@@ -5,6 +5,17 @@
 
 typedef union WindowEvent WindowEvent;
 
+typedef struct DisplayListOptions {
+	uint64 cargo_mask;
+	uint32 type_mask;
+	TileIndex xy;
+} DisplayListOptions;
+
+enum {
+	CARGO_MASK_ALL   = 0xFFFFFFFFFFFFFFFF,
+	VEHICLE_MASK_ALL = 0xFFFFFFFF,
+};
+
 //typedef void WindowProc(Window *w, int event, int wparam, long lparam);
 
 typedef void WindowProc(Window *w, WindowEvent *e);
@@ -307,6 +318,8 @@
 
 	Message message;
 	byte custom[WINDOW_CUSTOM_SIZE];
+	
+	DisplayListOptions listopt; // Options for displaying vehicle-lists
 };
 
 typedef struct {
